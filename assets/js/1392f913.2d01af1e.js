"use strict";(self.webpackChunktracetest_docs=self.webpackChunktracetest_docs||[]).push([[3269],{3905:(e,t,r)=>{r.d(t,{Zo:()=>g,kt:()=>h});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},g=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,g=l(e,["components","mdxType","originalType","parentName"]),p=c(r),d=a,h=p["".concat(s,".").concat(d)]||p[d]||u[d]||i;return r?n.createElement(h,o(o({ref:t},g),{},{components:r})):n.createElement(h,o({ref:t},g))}));function h(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=r[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},39799:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var n=r(87462),a=(r(67294),r(3905));const i={id:"trace-polling",title:"Trace Polling Settings",description:"Tracetest polls the trace data store to find and retrieve the trace that is generated by the current test run.",keywords:["tracetest","trace-based testing","observability","distributed tracing","testing"],image:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1698686403/docs/Blog_Thumbnail_14_rsvkmo.jpg"},o=void 0,l={unversionedId:"configuration/trace-polling",id:"configuration/trace-polling",title:"Trace Polling Settings",description:"Tracetest polls the trace data store to find and retrieve the trace that is generated by the current test run.",source:"@site/docs/configuration/trace-polling.mdx",sourceDirName:"configuration",slug:"/configuration/trace-polling",permalink:"/configuration/trace-polling",draft:!1,editUrl:"https://github.com/kubeshop/tracetest/blob/main/docs/docs/configuration/trace-polling.mdx",tags:[],version:"current",frontMatter:{id:"trace-polling",title:"Trace Polling Settings",description:"Tracetest polls the trace data store to find and retrieve the trace that is generated by the current test run.",keywords:["tracetest","trace-based testing","observability","distributed tracing","testing"],image:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1698686403/docs/Blog_Thumbnail_14_rsvkmo.jpg"},sidebar:"tutorialSidebar",previous:{title:"Tracetest Analyzer Settings",permalink:"/configuration/tracetest-analyzer"},next:{title:"Test Runner Settings",permalink:"/configuration/test-runner"}},s={},c=[{value:"Periodic Polling Strategy",id:"periodic-polling-strategy",level:2},{value:"Changing Trace Polling Settings from the UI",id:"changing-trace-polling-settings-from-the-ui",level:2},{value:"Changing Trace Polling Settings with the CLI",id:"changing-trace-polling-settings-with-the-cli",level:2}],g={toc:c},p="wrapper";function u(e){let{components:t,...i}=e;return(0,a.kt)(p,(0,n.Z)({},g,i,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Tracetest currently has one algorithm for gathering the trace associated with a test which is based on periodic polling. We will be adding the ability to add multiple polling settings in the coming releases, as well as adding new polling strategies. Let us know as you have specific needs by ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/kubeshop/tracetest/issues/new/choose"},"adding an issue"),"."),(0,a.kt)("h2",{id:"periodic-polling-strategy"},"Periodic Polling Strategy"),(0,a.kt)("p",null,"Tracetest polls the trace data store to find and retrieve the trace that is generated by the current test run. Both the total length of time to wait to receive the trace, i.e. the 'Max wait time for trace', and the time to delay between each polling attempt, i.e. 'Retry delay', can be adjusted. The following diagram shows how the polling for the trace works:"),(0,a.kt)("mermaid",{value:"flowchart TD\n    A[Run] --\x3e B[Created]\n    B --\x3e C[Resolve Trigger Vars]\n    C --\x3e D[Execute Trigger]\n    D --\x3e ET{Is Successful Trigger}\n    ET --\x3e|Yes| E[Queue Polling]\n    ET --\x3e|NO| ES[Set State to Failed]\n    ES --\x3e Q\n    E --\x3e F[Execute Polling Job]\n    F --\x3e G[Fetch Trace from Data Store<br>after the retry delay]\n    G --\x3e H{Trace Exists}\n    H --\x3e|No| I{Max wait time<br>for trace reached}\n    H --\x3e|Yes| J{Has the span # changed}\n    J --\x3e|Yes| G\n    J --\x3e|No| K[Trace is ready]\n    I --\x3e|No| G\n    I --\x3e|Yes| L[Trace fetch failed]\n    K --\x3e O[Generating Outputs]\n    O --\x3e P[Running Test Specs]\n    P --\x3e Q[Finish]\n    L --\x3e ES"}),(0,a.kt)("h2",{id:"changing-trace-polling-settings-from-the-ui"},"Changing Trace Polling Settings from the UI"),(0,a.kt)("p",null,"In the Tracetest Web UI, open (1) Settings and select (2) the Trace Polling tab:"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Trace Polling Settings",src:r(57630).Z,width:"2846",height:"1588"})),(0,a.kt)("p",null,"From this trace polling page, under settings, you can adjust the speed with which the trace data store is polled when gathering the trace associated with a test run."),(0,a.kt)("h2",{id:"changing-trace-polling-settings-with-the-cli"},"Changing Trace Polling Settings with the CLI"),(0,a.kt)("p",null,"Or, if you prefer using the CLI, you can use this resource definition file to set the polling parameters for the Tracetest server:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"type: PollingProfile\nspec:\n  default: true\n  periodic:\n    retryDelay: 500ms\n    timeout: 50s\n  strategy: periodic\n")),(0,a.kt)("p",null,"Proceed to run this command in the terminal and specify the file above."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"tracetest apply pollingprofile -f my/resource/pollingprofile-resource.yaml\n")))}u.isMDXComponent=!0},57630:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/trace-polling-settings-0.11.3-3a1c291ba54b81a434f7d77c1f90a1ea.png"}}]);