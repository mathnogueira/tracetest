"use strict";(self.webpackChunktracetest_docs=self.webpackChunktracetest_docs||[]).push([[1874],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>b});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(n),d=r,b=p["".concat(s,".").concat(d)]||p[d]||m[d]||i;return n?a.createElement(b,o(o({ref:t},u),{},{components:n})):a.createElement(b,o({ref:t},u))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},82193:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const i={id:"attribute-naming",title:"attribute-naming",description:"Enforce attribute keys to follow common specifications  | The Tracetest Analyzer analyzes OpenTelemetry traces",keywords:["tracetest","trace-based testing","observability","distributed tracing","testing"],image:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1698686403/docs/Blog_Thumbnail_14_rsvkmo.jpg"},o=void 0,l={unversionedId:"analyzer/rules/attribute-naming",id:"analyzer/rules/attribute-naming",title:"attribute-naming",description:"Enforce attribute keys to follow common specifications  | The Tracetest Analyzer analyzes OpenTelemetry traces",source:"@site/docs/analyzer/rules/attribute-naming.mdx",sourceDirName:"analyzer/rules",slug:"/analyzer/rules/attribute-naming",permalink:"/analyzer/rules/attribute-naming",draft:!1,editUrl:"https://github.com/kubeshop/tracetest/blob/main/docs/docs/analyzer/rules/attribute-naming.mdx",tags:[],version:"current",frontMatter:{id:"attribute-naming",title:"attribute-naming",description:"Enforce attribute keys to follow common specifications  | The Tracetest Analyzer analyzes OpenTelemetry traces",keywords:["tracetest","trace-based testing","observability","distributed tracing","testing"],image:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1698686403/docs/Blog_Thumbnail_14_rsvkmo.jpg"},sidebar:"tutorialSidebar",previous:{title:"span-naming",permalink:"/analyzer/rules/span-naming"},next:{title:"required-attributes",permalink:"/analyzer/rules/required-attributes"}},s={},c=[{value:"Rule Details",id:"rule-details",level:2},{value:"Options",id:"options",level:2},{value:"When Not To Use It",id:"when-not-to-use-it",level:2}],u={toc:c},p="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Enforce attribute keys to follow common specifications."),(0,r.kt)("h2",{id:"rule-details"},"Rule Details"),(0,r.kt)("p",null,"An ",(0,r.kt)("inlineCode",{parentName:"p"},"Attribute")," is a key-value pair, which is encapsulated as part of a span. The attribute key should follow a set of common specifications to be considered valid."),(0,r.kt)("p",null,"The following OpenTelemetry Semantic Conventions for attribute keys are defined:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"It must be a non-null and non-empty string."),(0,r.kt)("li",{parentName:"ul"},"It must be a valid Unicode sequence."),(0,r.kt)("li",{parentName:"ul"},"It should use namespacing to avoid name clashes. Delimit the namespaces using a dot character. For example ",(0,r.kt)("inlineCode",{parentName:"li"},"service.version")," denotes the service version where ",(0,r.kt)("inlineCode",{parentName:"li"},"service")," is the namespace and ",(0,r.kt)("inlineCode",{parentName:"li"},"version")," is an attribute in that namespace."),(0,r.kt)("li",{parentName:"ul"},"Namespaces can be nested. For example ",(0,r.kt)("inlineCode",{parentName:"li"},"telemetry.sdk")," is a namespace inside top-level ",(0,r.kt)("inlineCode",{parentName:"li"},"telemetry")," namespace and ",(0,r.kt)("inlineCode",{parentName:"li"},"telemetry.sdk.name")," is an attribute inside ",(0,r.kt)("inlineCode",{parentName:"li"},"telemetry.sdk")," namespace."),(0,r.kt)("li",{parentName:"ul"},"For each multi-word separate the words by underscores (use snake_case). For example ",(0,r.kt)("inlineCode",{parentName:"li"},"http.status_code")," denotes the status code in the http namespace."),(0,r.kt)("li",{parentName:"ul"},"Names should not coincide with namespaces. For example if ",(0,r.kt)("inlineCode",{parentName:"li"},"service.instance.id")," is an attribute name then it is no longer valid to have an attribute named ",(0,r.kt)("inlineCode",{parentName:"li"},"service.instance")," because ",(0,r.kt)("inlineCode",{parentName:"li"},"service.instance")," is already a namespace.")),(0,r.kt)("h2",{id:"options"},"Options"),(0,r.kt)("p",null,"This rule has the following options:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'"error"')," requires attribute keys to follow the OTel semantic convention"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'"disabled"')," disables the attribute keys verification"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'"warning"')," verifies attribute keys to follow the OTel semantic convention but does not impact the analyzer score")),(0,r.kt)("h2",{id:"when-not-to-use-it"},"When Not To Use It"),(0,r.kt)("p",null,"If you don\u2019t want to enforce OTel attribute keys, don't enable this rule."))}m.isMDXComponent=!0}}]);