"use strict";(self.webpackChunktracetest_docs=self.webpackChunktracetest_docs||[]).push([[9168],{18679:(e,t,n)=>{n.d(t,{Z:()=>s});var a=n(67294),r=n(86010);const o={tabItem:"tabItem_Ymn6"};function s(e){let{children:t,hidden:n,className:s}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o.tabItem,s),hidden:n},t)}},73992:(e,t,n)=>{n.d(t,{Z:()=>y});var a=n(87462),r=n(67294),o=n(86010),s=n(72957),l=n(16550),i=n(75238),p=n(33609),c=n(92560);function u(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function d(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??u(n);return function(e){const t=(0,p.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function h(e){let{queryString:t=!1,groupId:n}=e;const a=(0,l.k6)(),o=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,i._X)(o),(0,r.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(a.location.search);t.set(o,e),a.replace({...a.location,search:t.toString()})}),[o,a])]}function k(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,o=d(e),[s,l]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:o}))),[i,p]=h({queryString:n,groupId:a}),[u,k]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,o]=(0,c.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:a}),g=(()=>{const e=i??u;return m({value:e,tabValues:o})?e:null})();(0,r.useLayoutEffect)((()=>{g&&l(g)}),[g]);return{selectedValue:s,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);l(e),p(e),k(e)}),[p,k,o]),tabValues:o}}var g=n(51048);const N={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function T(e){let{className:t,block:n,selectedValue:l,selectValue:i,tabValues:p}=e;const c=[],{blockElementScrollPositionUntilNextRender:u}=(0,s.o5)(),d=e=>{const t=e.currentTarget,n=c.indexOf(t),a=p[n].value;a!==l&&(u(t),i(a))},m=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=c.indexOf(e.currentTarget)+1;t=c[n]??c[0];break}case"ArrowLeft":{const n=c.indexOf(e.currentTarget)-1;t=c[n]??c[c.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":n},t)},p.map((e=>{let{value:t,label:n,attributes:s}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:l===t?0:-1,"aria-selected":l===t,key:t,ref:e=>c.push(e),onKeyDown:m,onClick:d},s,{className:(0,o.Z)("tabs__item",N.tabItem,s?.className,{"tabs__item--active":l===t})}),n??t)})))}function f(e){let{lazy:t,children:n,selectedValue:a}=e;const o=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},o.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function b(e){const t=k(e);return r.createElement("div",{className:(0,o.Z)("tabs-container",N.tabList)},r.createElement(T,(0,a.Z)({},e,t)),r.createElement(f,(0,a.Z)({},e,t)))}function y(e){const t=(0,g.Z)();return r.createElement(b,(0,a.Z)({key:String(t)},e))}},47686:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>l,metadata:()=>p,toc:()=>u});var a=n(87462),r=(n(67294),n(3905)),o=n(73992),s=n(18679);n(92053);const l={id:"running-tracetest-without-a-trace-data-store",title:"Node.js and OpenTelemetry",description:"Quick start how to configure a Node.js app to use OpenTelemetry instrumentation with traces, and Tracetest for enhancing your E2E and integration tests with trace-based testing.",hide_table_of_contents:!0,keywords:["tracetest","trace-based testing","observability","distributed tracing","testing"],image:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1698686403/docs/Blog_Thumbnail_14_rsvkmo.jpg"},i=void 0,p={unversionedId:"examples-tutorials/recipes/running-tracetest-without-a-trace-data-store",id:"examples-tutorials/recipes/running-tracetest-without-a-trace-data-store",title:"Node.js and OpenTelemetry",description:"Quick start how to configure a Node.js app to use OpenTelemetry instrumentation with traces, and Tracetest for enhancing your E2E and integration tests with trace-based testing.",source:"@site/docs/examples-tutorials/recipes/running-tracetest-without-a-trace-data-store.mdx",sourceDirName:"examples-tutorials/recipes",slug:"/examples-tutorials/recipes/running-tracetest-without-a-trace-data-store",permalink:"/examples-tutorials/recipes/running-tracetest-without-a-trace-data-store",draft:!1,editUrl:"https://github.com/kubeshop/tracetest/blob/main/docs/docs/examples-tutorials/recipes/running-tracetest-without-a-trace-data-store.mdx",tags:[],version:"current",frontMatter:{id:"running-tracetest-without-a-trace-data-store",title:"Node.js and OpenTelemetry",description:"Quick start how to configure a Node.js app to use OpenTelemetry instrumentation with traces, and Tracetest for enhancing your E2E and integration tests with trace-based testing.",hide_table_of_contents:!0,keywords:["tracetest","trace-based testing","observability","distributed tracing","testing"],image:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1698686403/docs/Blog_Thumbnail_14_rsvkmo.jpg"},sidebar:"examplesTutorialsSidebar",previous:{title:"Testing Kafka in a Go API with OpenTelemetry and Tracetest",permalink:"/examples-tutorials/recipes/testing-kafka-go-api-with-opentelemetry-tracetest"},next:{title:"Node.js and OpenTelemetry Manual Instrumentation",permalink:"/examples-tutorials/recipes/running-tracetest-without-a-trace-data-store-with-manual-instrumentation"}},c={},u=[{value:"Node.js App with Tracetest",id:"nodejs-app-with-tracetest",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Project Structure",id:"project-structure",level:2},{value:"1. Tracetest Agent",id:"1-tracetest-agent",level:3},{value:"2. Node.js App",id:"2-nodejs-app",level:3},{value:"Run the Node.js App with Docker Compose",id:"run-the-nodejs-app-with-docker-compose",level:2},{value:"Run the Node.js App Locally",id:"run-the-nodejs-app-locally",level:2},{value:"Run Tracetest Tests",id:"run-tracetest-tests",level:2},{value:"Prerequisites",id:"prerequisites-1",level:2},{value:"Project Structure",id:"project-structure-1",level:2},{value:"1. Node.js App",id:"1-nodejs-app",level:3},{value:"2. Tracetest Core",id:"2-tracetest-core",level:3},{value:"Docker Compose Network",id:"docker-compose-network",level:3},{value:"Node.js App",id:"nodejs-app",level:2},{value:"Tracetest Core",id:"tracetest-core",level:2},{value:"Run Both the Node.js App and Tracetest",id:"run-both-the-nodejs-app-and-tracetest",level:2},{value:"Learn More",id:"learn-more",level:2}],d={toc:u},m="wrapper";function h(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("a",{parentName:"p",href:"https://github.com/kubeshop/tracetest/tree/main/examples/quick-start-nodejs"},"Check out the source code on GitHub here."))),(0,r.kt)("p",null,"Build integration and end-to-end tests in minutes, instead of days, using ",(0,r.kt)("a",{parentName:"p",href:"https://opentelemetry.io/"},"OpenTelemetry")," and ",(0,r.kt)("a",{parentName:"p",href:"https://tracetest.io/"},"Tracetest"),"."),(0,r.kt)("h2",{id:"nodejs-app-with-tracetest"},"Node.js App with Tracetest"),(0,r.kt)("p",null,"This is a quick start on how to configure a Node.js app to use OpenTelemetry instrumentation with traces, and Tracetest for enhancing your E2E and integration tests with trace-based testing."),(0,r.kt)(o.Z,{groupId:"running-tracetest-without-a-trace-data-store",mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"Tracetest",label:"Tracetest",default:!0,mdxType:"TabItem"},(0,r.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,r.kt)("p",null,"You can run this example with ",(0,r.kt)("a",{parentName:"p",href:"https://docs.docker.com/get-docker/"},"Docker"),", or locally with Node.js installed on your machine."),(0,r.kt)("h2",{id:"project-structure"},"Project Structure"),(0,r.kt)("p",null,"The project contains Tracetest Agent and a Node.js app."),(0,r.kt)("h3",{id:"1-tracetest-agent"},"1. Tracetest Agent"),(0,r.kt)("p",null,"Install and run Tracetest Agent locally."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:"title=Terminal",title:"Terminal"},"tracetest start\n")),(0,r.kt)("p",null,"Once started, Tracetest Agent will:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Expose OTLP ports ",(0,r.kt)("inlineCode",{parentName:"li"},"4317")," (gRPC) and ",(0,r.kt)("inlineCode",{parentName:"li"},"4318")," (HTTP) for trace ingestion."),(0,r.kt)("li",{parentName:"ul"},"Be able to trigger test runs in the environment where it is running."),(0,r.kt)("li",{parentName:"ul"},"Be able to connect to a trace data store that is not accessible outside of your environment.")),(0,r.kt)("h3",{id:"2-nodejs-app"},"2. Node.js App"),(0,r.kt)("p",null,"The Node.js app is a simple Express app, contained in the ",(0,r.kt)("inlineCode",{parentName:"p"},"app.js")," file."),(0,r.kt)("p",null,"The OpenTelemetry tracing is contained in the ",(0,r.kt)("inlineCode",{parentName:"p"},"tracing.otel.grpc.js")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"tracing.otel.http.js")," files.\nTraces will be sent to Tracetest Agent."),(0,r.kt)("p",null,"Here's the content of the ",(0,r.kt)("inlineCode",{parentName:"p"},"tracing.otel.grpc.js")," file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const opentelemetry = require('@opentelemetry/sdk-node')\nconst { getNodeAutoInstrumentations } = require('@opentelemetry/auto-instrumentations-node')\nconst { OTLPTraceExporter } = require('@opentelemetry/exporter-trace-otlp-grpc');\n\nconst sdk = new opentelemetry.NodeSDK({\n  // OTEL_EXPORTER_OTLP_TRACES_ENDPOINT is passed into \"new OTLPTraceExporter\" automatically\n  traceExporter: new OTLPTraceExporter(),\n  instrumentations: [getNodeAutoInstrumentations()],\n})\nsdk.start()\n")),(0,r.kt)("p",null,"Choosing the ",(0,r.kt)("inlineCode",{parentName:"p"},"tracing.otel.grpc.js")," file will send traces to Tracetest Agent's ",(0,r.kt)("inlineCode",{parentName:"p"},"GRPC"),"."),(0,r.kt)("p",null,"Configure it an environment variable:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Running in Docker: ",(0,r.kt)("inlineCode",{parentName:"li"},"OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://host.docker.internal:4317")),(0,r.kt)("li",{parentName:"ul"},"Running locally: ",(0,r.kt)("inlineCode",{parentName:"li"},"OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://localhost:4317"))),(0,r.kt)("p",null,"Enabling the tracer is done by preloading the trace file."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"node -r ./tracing.otel.grpc.js app.js\n")),(0,r.kt)("p",null,"In the ",(0,r.kt)("inlineCode",{parentName:"p"},"package.json")," you will see two npm scripts for running the respective tracers alongside the ",(0,r.kt)("inlineCode",{parentName:"p"},"app.js"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'"scripts": {\n  "with-grpc-tracer":"node -r ./tracing.otel.grpc.js app.js",\n  "with-http-tracer":"node -r ./tracing.otel.http.js app.js"\n},\n')),(0,r.kt)("p",null,"To start the server, run this command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm run with-grpc-tracer\n# or\nnpm run with-http-tracer\n")),(0,r.kt)("h2",{id:"run-the-nodejs-app-with-docker-compose"},"Run the Node.js App with Docker Compose"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"docker-compose.yaml")," file and ",(0,r.kt)("inlineCode",{parentName:"p"},"Dockerfile")," in the root directory are for the Node.js app."),(0,r.kt)("p",null,"As you can see, the ",(0,r.kt)("inlineCode",{parentName:"p"},"Dockerfile")," uses the command above."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-Dockerfile"},'FROM node:slim\nWORKDIR /usr/src/app\nCOPY package*.json ./\nRUN npm install\nCOPY . .\nEXPOSE 8080\nCMD [ "npm", "run", "with-grpc-tracer" ]\n')),(0,r.kt)("p",null,"And, the ",(0,r.kt)("inlineCode",{parentName:"p"},"docker-compose.yaml")," contains just one service for the Node.js app."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'version: \'3\'\nservices:\n  app:\n    image: quick-start-nodejs\n    extra_hosts:\n      - "host.docker.internal:host-gateway"\n    build: .\n    ports:\n      - "8080:8080"\n    environment:\n      - OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://host.docker.internal:4317\n')),(0,r.kt)("p",null,"To start it, run this command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker compose build # optional if you haven't already built the image\ndocker compose up\n")),(0,r.kt)("p",null,"This will start the Node.js app and send the traces to Tracetest Agent."),(0,r.kt)("h2",{id:"run-the-nodejs-app-locally"},"Run the Node.js App Locally"),(0,r.kt)("p",null,"Install Node.js and npm in your local development environment."),(0,r.kt)("p",null,"Install the npm modules, export the OTLP endpoint, and run the Node.js app."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm i \nexport OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://localhost:4317\nnpm run with-grpc-tracer\n")),(0,r.kt)("p",null,"This will start the Node.js app and send the traces to Tracetest Agent."),(0,r.kt)("h2",{id:"run-tracetest-tests"},"Run Tracetest Tests"),(0,r.kt)("p",null,"Open ",(0,r.kt)("a",{parentName:"p",href:"https://app.tracetest.io/"},"Tracetest")," and start creating tests! Make sure to use the ",(0,r.kt)("inlineCode",{parentName:"p"},"http://localhost:8080/")," URL in your test creation.")),(0,r.kt)(s.Z,{value:"Tracetest Core",label:"Tracetest Core",mdxType:"TabItem"},(0,r.kt)("h2",{id:"prerequisites-1"},"Prerequisites"),(0,r.kt)("p",null,"You will need ",(0,r.kt)("a",{parentName:"p",href:"https://docs.docker.com/get-docker/"},"Docker")," and ",(0,r.kt)("a",{parentName:"p",href:"https://docs.docker.com/compose/install/"},"Docker Compose")," installed on your machine to run this quick start app!"),(0,r.kt)("h2",{id:"project-structure-1"},"Project Structure"),(0,r.kt)("p",null,"The project is built with Docker Compose. It contains two distinct ",(0,r.kt)("inlineCode",{parentName:"p"},"docker-compose.yaml")," files."),(0,r.kt)("h3",{id:"1-nodejs-app"},"1. Node.js App"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"docker-compose.yaml")," file and ",(0,r.kt)("inlineCode",{parentName:"p"},"Dockerfile")," in the root directory are for the Node.js app."),(0,r.kt)("h3",{id:"2-tracetest-core"},"2. Tracetest Core"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"docker-compose.yaml")," file, ",(0,r.kt)("inlineCode",{parentName:"p"},"collector.config.yaml"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"tracetest-provision.yaml"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"tracetest.config.yaml")," in the ",(0,r.kt)("inlineCode",{parentName:"p"},"tracetest")," directory are for the setting up Tracetest and the OpenTelemetry Collector."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"tracetest")," directory is self-contained and will run all the prerequisites for enabling OpenTelemetry traces and trace-based testing with Tracetest."),(0,r.kt)("h3",{id:"docker-compose-network"},"Docker Compose Network"),(0,r.kt)("p",null,"All ",(0,r.kt)("inlineCode",{parentName:"p"},"services")," in the ",(0,r.kt)("inlineCode",{parentName:"p"},"docker-compose.yaml")," are on the same network and will be reachable by hostname from within other services. E.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"tracetest:4317")," in the ",(0,r.kt)("inlineCode",{parentName:"p"},"collector.config.yaml")," will map to the ",(0,r.kt)("inlineCode",{parentName:"p"},"tracetest")," service, where the port ",(0,r.kt)("inlineCode",{parentName:"p"},"4317")," is the port where Tracetest accepts traces."),(0,r.kt)("h2",{id:"nodejs-app"},"Node.js App"),(0,r.kt)("p",null,"The Node.js app is a simple Express app, contained in the ",(0,r.kt)("inlineCode",{parentName:"p"},"app.js")," file."),(0,r.kt)("p",null,"The OpenTelemetry tracing is contained in the ",(0,r.kt)("inlineCode",{parentName:"p"},"tracing.otel.grpc.js")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"tracing.otel.http.js")," files.\nTraces will be sent to the OpenTelemetry Collector."),(0,r.kt)("p",null,"Here's the content of the ",(0,r.kt)("inlineCode",{parentName:"p"},"tracing.otel.grpc.js")," file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const opentelemetry = require('@opentelemetry/sdk-node')\nconst { getNodeAutoInstrumentations } = require('@opentelemetry/auto-instrumentations-node')\nconst { OTLPTraceExporter } = require('@opentelemetry/exporter-trace-otlp-grpc');\n\nconst sdk = new opentelemetry.NodeSDK({\n  traceExporter: new OTLPTraceExporter({ url: 'http://otel-collector:4317' }),\n  instrumentations: [getNodeAutoInstrumentations()],\n})\nsdk.start()\n")),(0,r.kt)("p",null,"Depending on which of these you choose, traces will be sent to either the ",(0,r.kt)("inlineCode",{parentName:"p"},"GRPC")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"HTTP")," endpoint."),(0,r.kt)("p",null,"The hostnames and ports for these are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"GRPC: ",(0,r.kt)("inlineCode",{parentName:"li"},"http://otel-collector:4317")),(0,r.kt)("li",{parentName:"ul"},"HTTP: ",(0,r.kt)("inlineCode",{parentName:"li"},"http://otel-collector:4318/v1/traces"))),(0,r.kt)("p",null,"Enabling the tracer is done by preloading the trace file."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"node -r ./tracing.otel.grpc.js app.js\n")),(0,r.kt)("p",null,"In the ",(0,r.kt)("inlineCode",{parentName:"p"},"package.json")," you will see two npm scripts for running the respective tracers alongside the ",(0,r.kt)("inlineCode",{parentName:"p"},"app.js"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'"scripts": {\n  "with-grpc-tracer":"node -r ./tracing.otel.grpc.js app.js",\n  "with-http-tracer":"node -r ./tracing.otel.http.js app.js"\n},\n')),(0,r.kt)("p",null,"To start the server, run this command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm run with-grpc-tracer\n# or\nnpm run with-http-tracer\n")),(0,r.kt)("p",null,"As you can see, the ",(0,r.kt)("inlineCode",{parentName:"p"},"Dockerfile")," uses the command above."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-Dockerfile"},'FROM node:slim\nWORKDIR /usr/src/app\nCOPY package*.json ./\nRUN npm install\nCOPY . .\nEXPOSE 8080\nCMD [ "npm", "run", "with-grpc-tracer" ]\n')),(0,r.kt)("p",null,"And, the ",(0,r.kt)("inlineCode",{parentName:"p"},"docker-compose.yaml")," contains just one service for the Node.js app."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"version: '3'\nservices:\n  app:\n    image: quick-start-nodejs\n    build: .\n    ports:\n      - \"8080:8080\"\n")),(0,r.kt)("p",null,"To start it, run this command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker compose build # optional if you haven't already built the image\ndocker compose up\n")),(0,r.kt)("p",null,"This will start the Node.js app. But, you're not sending the traces anywhere."),(0,r.kt)("p",null,"Let's fix this by configuring Tracetest and OpenTelemetry Collector."),(0,r.kt)("h2",{id:"tracetest-core"},"Tracetest Core"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"docker-compose.yaml")," in the ",(0,r.kt)("inlineCode",{parentName:"p"},"tracetest")," directory is configured with three services."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Postgres")," - Postgres is a prerequisite for Tracetest to work. It stores trace data when running the trace-based tests."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://opentelemetry.io/docs/collector/"},(0,r.kt)("strong",{parentName:"a"},"OpenTelemetry Collector"))," - A vendor-agnostic implementation of how to receive, process and export telemetry data."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/kubeshop/tracetest"},(0,r.kt)("strong",{parentName:"a"},"Tracetest Core"))," - Trace-based testing that generates end-to-end tests automatically from traces.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'version: "3"\nservices:\n  tracetest:\n    image: kubeshop/tracetest:latest\n    platform: linux/amd64\n    volumes:\n      - type: bind\n        source: ./tracetest/tracetest-config.yaml\n        target: /app/tracetest.yaml\n      - type: bind\n        source: ./tracetest/tracetest-provision.yaml\n        target: /app/provisioning.yaml\n    ports:\n      - 11633:11633\n    command: --provisioning-file /app/provisioning.yaml\n    depends_on:\n      postgres:\n        condition: service_healthy\n      otel-collector:\n        condition: service_started\n    healthcheck:\n      test: ["CMD", "wget", "--spider", "localhost:11633"]\n      interval: 1s\n      timeout: 3s\n      retries: 60\n\n  postgres:\n    image: postgres:14\n    environment:\n      POSTGRES_PASSWORD: postgres\n      POSTGRES_USER: postgres\n    healthcheck:\n      test: pg_isready -U "$$POSTGRES_USER" -d "$$POSTGRES_DB"\n      interval: 1s\n      timeout: 5s\n      retries: 60\n\n  otel-collector:\n    image: otel/opentelemetry-collector-contrib:0.59.0\n    command:\n      - "--config"\n      - "/otel-local-config.yaml"\n    volumes:\n      - ./tracetest/collector.config.yaml:/otel-local-config.yaml\n\n')),(0,r.kt)("p",null,"Tracetest Core depends on both Postgres and the OpenTelemetry Collector. Both Tracetest Core and the OpenTelemetry Collector require config files to be loaded via a volume. The volumes are mapped from the root directory into the ",(0,r.kt)("inlineCode",{parentName:"p"},"tracetest")," directory and the respective config files."),(0,r.kt)("p",null,"To start both the Node.js app and Tracetest Core we will run this command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker-compose -f docker-compose.yaml -f tracetest/docker-compose.yaml up # add --build if the images are not built already\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"tracetest-config.yaml")," file contains the basic setup of connecting Tracetest Core to the Postgres instance."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"postgres:\n  host: postgres\n  user: postgres\n  password: postgres\n  port: 5432\n  dbname: postgres\n  params: sslmode=disable\n\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"tracetest-provision.yaml")," file provisions the trace data store and polling to store in the Postgres database. The data store is set to OTLP, meaning the traces will be sent to Tracetest Core."),(0,r.kt)("p",null,"But how are traces sent to Tracetest?"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"collector.config.yaml")," explains that. It receives traces via either ",(0,r.kt)("inlineCode",{parentName:"p"},"grpc")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"http"),". Then, exports them to Tracetest's OLTP endpoint ",(0,r.kt)("inlineCode",{parentName:"p"},"tracetest:4317"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"receivers:\n  otlp:\n    protocols:\n      grpc:\n      http:\n\nprocessors:\n  batch:\n    timeout: 100ms\n\nexporters:\n  logging:\n    loglevel: debug\n  otlp/1:\n    endpoint: tracetest:4317\n    # Send traces to Tracetest.\n    # Read more in docs here: https://docs.tracetest.io/configuration/connecting-to-data-stores/opentelemetry-collector\n    tls:\n      insecure: true\n\nservice:\n  pipelines:\n    traces/1:\n      receivers: [otlp]\n      processors: [batch]\n      exporters: [otlp/1]\n\n")),(0,r.kt)("h2",{id:"run-both-the-nodejs-app-and-tracetest"},"Run Both the Node.js App and Tracetest"),(0,r.kt)("p",null,"To start both the Node.js app and Tracetest, run this command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker-compose -f docker-compose.yaml -f tracetest/docker-compose.yaml up # add --build if the images are not built already\n")),(0,r.kt)("p",null,"This will start your Tracetest Core instance on ",(0,r.kt)("inlineCode",{parentName:"p"},"http://localhost:11633/"),"."),(0,r.kt)("p",null,"Open the URL and start creating tests! Make sure to use the ",(0,r.kt)("inlineCode",{parentName:"p"},"http://app:8080/")," URL in your test creation, because your Node.js app and Tracetest Core are in the same network."))),(0,r.kt)("h2",{id:"learn-more"},"Learn More"),(0,r.kt)("p",null,"Feel free to check out our ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/kubeshop/tracetest/tree/main/examples"},"examples in GitHub")," and join our ",(0,r.kt)("a",{parentName:"p",href:"https://discord.gg/8MtcMrQNbX"},"Discord Community")," for more info!"))}h.isMDXComponent=!0}}]);