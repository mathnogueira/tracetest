"use strict";(self.webpackChunktracetest_docs=self.webpackChunktracetest_docs||[]).push([[2885],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>m});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),l=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},g=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=l(r),g=a,m=p["".concat(s,".").concat(g)]||p[g]||d[g]||o;return r?n.createElement(m,i(i({ref:t},u),{},{components:r})):n.createElement(m,i({ref:t},u))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=g;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[p]="string"==typeof e?e:a,i[1]=c;for(var l=2;l<o;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}g.displayName="MDXCreateElement"},9936:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var n=r(87462),a=(r(67294),r(3905));const o={id:"agent",title:"Tracetest Agent",description:"Tracetest Agent is a lightweight, dependency-free agent that runs locally in your development environment, or as a Docker container in your Cloud Native infrastructure.",keywords:["tracetest","trace-based testing","observability","distributed tracing","testing"],image:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1698686403/docs/Blog_Thumbnail_14_rsvkmo.jpg"},i=void 0,c={unversionedId:"concepts/agent",id:"concepts/agent",title:"Tracetest Agent",description:"Tracetest Agent is a lightweight, dependency-free agent that runs locally in your development environment, or as a Docker container in your Cloud Native infrastructure.",source:"@site/docs/concepts/agent.mdx",sourceDirName:"concepts",slug:"/concepts/agent",permalink:"/concepts/agent",draft:!1,editUrl:"https://github.com/kubeshop/tracetest/blob/main/docs/docs/concepts/agent.mdx",tags:[],version:"current",frontMatter:{id:"agent",title:"Tracetest Agent",description:"Tracetest Agent is a lightweight, dependency-free agent that runs locally in your development environment, or as a Docker container in your Cloud Native infrastructure.",keywords:["tracetest","trace-based testing","observability","distributed tracing","testing"],image:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1698686403/docs/Blog_Thumbnail_14_rsvkmo.jpg"},sidebar:"tutorialSidebar",previous:{title:"What is Trace-Based Testing",permalink:"/concepts/what-is-trace-based-testing"},next:{title:"Architecture",permalink:"/concepts/architecture"}},s={},l=[{value:"How It Works",id:"how-it-works",level:2},{value:"Architecture",id:"architecture",level:2}],u={toc:l},p="wrapper";function d(e){let{components:t,...r}=e;return(0,a.kt)(p,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Tracetest Agent is a lightweight, dependency-free agent that runs locally in your development environment, or as a Docker container in your Cloud Native infrastructure."),(0,a.kt)("h2",{id:"how-it-works"},"How It Works"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Tracetest Agent listens for new tests you run from ",(0,a.kt)("a",{parentName:"li",href:"https://app.tracetest.io"},"Tracetest"),". It executes tests in the environment where it is running and returns the response from the trigger. The environment can be either ",(0,a.kt)("inlineCode",{parentName:"li"},"localhost"),", Docker, or Kubernetes."),(0,a.kt)("li",{parentName:"ul"},"Tracetest Agent listens on OTLP ports ",(0,a.kt)("inlineCode",{parentName:"li"},"4317")," (gRPC) and ",(0,a.kt)("inlineCode",{parentName:"li"},"4318")," (HTTP) for OpenTelemetry trace spans to capture distributed trace data and relay it to ",(0,a.kt)("a",{parentName:"li",href:"https://app.tracetest.io"},"Tracetest"),"."),(0,a.kt)("li",{parentName:"ul"},"Be able to connect to a trace data store that is not accessible outside of your environment. Eg. a Jaeger instance running in the cluster without an ingress controller."),(0,a.kt)("li",{parentName:"ul"},"With both the response and trace, you build tests and create assertions with data from either or both of them.")),(0,a.kt)("h2",{id:"architecture"},"Architecture"),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1697464028/docs/agent-saas-oct-16-whitebg_i4stow.png",alt:null})),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"Want to start Tracetest Agent? Check out ",(0,a.kt)("a",{parentName:"p",href:"../getting-started/installation"},"this page to get started"),".")))}d.isMDXComponent=!0}}]);