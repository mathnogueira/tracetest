"use strict";(self.webpackChunktracetest_docs=self.webpackChunktracetest_docs||[]).push([[3953],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),u=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(o.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,o=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=u(n),d=r,f=c["".concat(o,".").concat(d)]||c[d]||m[d]||s;return n?a.createElement(f,i(i({ref:t},p),{},{components:n})):a.createElement(f,i({ref:t},p))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,i=new Array(s);i[0]=d;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l[c]="string"==typeof e?e:r,i[1]=l;for(var u=2;u<s;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},54808:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>m,frontMatter:()=>s,metadata:()=>l,toc:()=>u});var a=n(87462),r=(n(67294),n(3905));const s={id:"creating-test-outputs",title:"Defining Test Outputs in Text Files",description:"Test outputs allow for exporting values from a test so they become available in Variable Sets of a Test Suite.",keywords:["tracetest","trace-based testing","observability","distributed tracing","testing"],image:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1698686403/docs/Blog_Thumbnail_14_rsvkmo.jpg"},i=void 0,l={unversionedId:"cli/creating-test-outputs",id:"cli/creating-test-outputs",title:"Defining Test Outputs in Text Files",description:"Test outputs allow for exporting values from a test so they become available in Variable Sets of a Test Suite.",source:"@site/docs/cli/creating-test-outputs.mdx",sourceDirName:"cli",slug:"/cli/creating-test-outputs",permalink:"/cli/creating-test-outputs",draft:!1,editUrl:"https://github.com/kubeshop/tracetest/blob/main/docs/docs/cli/creating-test-outputs.mdx",tags:[],version:"current",frontMatter:{id:"creating-test-outputs",title:"Defining Test Outputs in Text Files",description:"Test outputs allow for exporting values from a test so they become available in Variable Sets of a Test Suite.",keywords:["tracetest","trace-based testing","observability","distributed tracing","testing"],image:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1698686403/docs/Blog_Thumbnail_14_rsvkmo.jpg"},sidebar:"tutorialSidebar",previous:{title:"Defining Test Specifications in Text Files",permalink:"/cli/creating-test-specifications"},next:{title:"Running Tests From the Command Line Interface (CLI)",permalink:"/cli/running-tests"}},o={},u=[{value:"Outputs are Expression Results",id:"outputs-are-expression-results",level:2},{value:"Examples",id:"examples",level:2},{value:"Basic Expression",id:"basic-expression",level:3},{value:"Extract a Value from a JSON",id:"extract-a-value-from-a-json",level:3},{value:"Multiple Values",id:"multiple-values",level:3}],p={toc:u},c="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Outputs are really useful when running ",(0,r.kt)("a",{parentName:"p",href:"/concepts/test-suites"},"Test Suites"),". They allow for exporting values from a test so they become available in the ",(0,r.kt)("a",{parentName:"p",href:"/concepts/variable-sets"},"Variable Sets")," of the current Test Suite."),(0,r.kt)("h2",{id:"outputs-are-expression-results"},"Outputs are Expression Results"),(0,r.kt)("p",null,"An output exports the result of an ",(0,r.kt)("a",{parentName:"p",href:"/concepts/expressions"},"Expression")," and assigns it to a name, so it can be injected into the variable set of a running Test Suite.\nA ",(0,r.kt)("inlineCode",{parentName:"p"},"selector")," is needed only if the provided expression refers to a/some span/s attribute or meta attributes."),(0,r.kt)("p",null,"It can be defined using the following YAML definition:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'outputs:\n  - name: USER_ID\n    selector: span[name = "user creation"]\n    value: attr:myapp.users.created_id\n')),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"value")," attribute is an ",(0,r.kt)("inlineCode",{parentName:"p"},"expression")," and is a very powerful tool."),(0,r.kt)("h2",{id:"examples"},"Examples"),(0,r.kt)("h3",{id:"basic-expression"},"Basic Expression"),(0,r.kt)("p",null,"You can output basic expressions:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'outputs:\n\n- name: ARITHMETIC_RESULT\n  value: 1 + 1\n  # results in ARITHMETIC_RESULT = 2\n\n- name: INTERPOLATE_STRING\n  # assume PRE_EXISTING_VALUE=someValue from env vars\n  value: "the value ${var:PRE_EXISTING_VALUE} comes from the env var PRE_EXISTING_VALUE"\n  # results in INTERPOLATE_STRING = "the value someValue comes from the env var PRE_EXISTING_VALUE\n')),(0,r.kt)("h3",{id:"extract-a-value-from-a-json"},"Extract a Value from a JSON"),(0,r.kt)("p",null,"Imagine a hypotetical ",(0,r.kt)("inlineCode",{parentName:"p"},"/users/create")," endpoint that returns the full ",(0,r.kt)("inlineCode",{parentName:"p"},"user")," object, including the new ID, when the operation is successful."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"outputs:\n- name: USER_ID\n  selector: span[name = \"POST /user/create\"]\n  value: attr:http.response.body | json_path '.id'\n")),(0,r.kt)("h3",{id:"multiple-values"},"Multiple Values"),(0,r.kt)("p",null,"Using the same hypotethical user creation endpoint, a user creation might result on multiple sql queries, for example:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"INSERT INTO users ...")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"INSERT INTO permissions...")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"SELECT remaining_users FROM accounts")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"UPDATE accounts SET remaining_users ..."))),(0,r.kt)("p",null,"In this case, the service is instrumented so that each query generates a span of type ",(0,r.kt)("inlineCode",{parentName:"p"},"database"),".\nYou can get a list of SQL operations:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'outputs:\n- name: SQL_OPS\n  selector: span[tracetest.span.type = "database"]\n  value: attr:sql.operation\n  # result: SQL_OPS = ["INSERT", "INSERT", "SELECT", "UPDATE"]\n')),(0,r.kt)("p",null,"Since the value is an array, you can also apply filters to it:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'outputs:\n- name: LAST_SQL_OP\n  selector: span[tracetest.span.type = "database"]\n  value: attr:sql.operation | get_index \'last\'\n  # result: LAST_SQL_OP = "INSERT"\n')))}m.isMDXComponent=!0}}]);