"use strict";(self.webpackChunktracetest_docs=self.webpackChunktracetest_docs||[]).push([[4244],{3905:(e,t,a)=>{a.d(t,{Zo:()=>l,kt:()=>k});var n=a(67294);function s(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){s(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,s=function(e,t){if(null==e)return{};var a,n,s={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(s[a]=e[a]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(s[a]=e[a])}return s}var p=n.createContext({}),m=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},l=function(e){var t=m(e.components);return n.createElement(p.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,s=e.mdxType,r=e.originalType,p=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),c=m(a),u=s,k=c["".concat(p,".").concat(u)]||c[u]||d[u]||r;return a?n.createElement(k,o(o({ref:t},l),{},{components:a})):n.createElement(k,o({ref:t},l))}));function k(e,t){var a=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var r=a.length,o=new Array(r);o[0]=u;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[c]="string"==typeof e?e:s,o[1]=i;for(var m=2;m<r;m++)o[m]=a[m];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},94516:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>m});var n=a(87462),s=(a(67294),a(3905));const r={id:"import-pokemon-from-stream",title:"Pokeshop API - Import Pokemon from Stream",description:"As a testing ground, the Tracetest team has implemented a sample API instrumented with OpenTelemetry around the PokeAPI. This use case showcases a more complex scenario involving an async process.",hide_table_of_contents:!1,keywords:["tracetest","trace-based testing","observability","distributed tracing","testing"],image:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1698686403/docs/Blog_Thumbnail_14_rsvkmo.jpg"},o=void 0,i={unversionedId:"live-examples/pokeshop/use-cases/import-pokemon-from-stream",id:"live-examples/pokeshop/use-cases/import-pokemon-from-stream",title:"Pokeshop API - Import Pokemon from Stream",description:"As a testing ground, the Tracetest team has implemented a sample API instrumented with OpenTelemetry around the PokeAPI. This use case showcases a more complex scenario involving an async process.",source:"@site/docs/live-examples/pokeshop/use-cases/import-pokemon-from-stream.mdx",sourceDirName:"live-examples/pokeshop/use-cases",slug:"/live-examples/pokeshop/use-cases/import-pokemon-from-stream",permalink:"/live-examples/pokeshop/use-cases/import-pokemon-from-stream",draft:!1,editUrl:"https://github.com/kubeshop/tracetest/blob/main/docs/docs/live-examples/pokeshop/use-cases/import-pokemon-from-stream.mdx",tags:[],version:"current",frontMatter:{id:"import-pokemon-from-stream",title:"Pokeshop API - Import Pokemon from Stream",description:"As a testing ground, the Tracetest team has implemented a sample API instrumented with OpenTelemetry around the PokeAPI. This use case showcases a more complex scenario involving an async process.",hide_table_of_contents:!1,keywords:["tracetest","trace-based testing","observability","distributed tracing","testing"],image:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1698686403/docs/Blog_Thumbnail_14_rsvkmo.jpg"},sidebar:"liveExamplesSidebar",previous:{title:"Pokeshop API - Import Pokemon",permalink:"/live-examples/pokeshop/use-cases/import-pokemon"}},p={},m=[{value:"Building a Test for This Scenario",id:"building-a-test-for-this-scenario",level:2},{value:"Traces",id:"traces",level:3},{value:"Assertions",id:"assertions",level:3},{value:"Test Definition",id:"test-definition",level:3}],l={toc:m},c="wrapper";function d(e){let{components:t,...r}=e;return(0,s.kt)(c,(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"This use case showcases a more complex scenario involving an async process. Usually, when working with microservices, there are use cases where some of the processing needs to happen asynchronously. For example, when triggering a user notification, generating reports or processing a payment order. With this endpoint, we provide an example of how users can implement trace-based testing for such scenarios."),(0,s.kt)("p",null,"Here the process listens to a stream, and whenever an event is read from it, the following process is triggered:"),(0,s.kt)("mermaid",{value:'sequenceDiagram\n    participant Stream as Kafka\n    participant Worker as Stream Worker\n    participant ExternalAPI as PokeAPI\n    participant Database as Postgres\n    \n    Stream->>Worker: read "import" message\n\n    Worker->>ExternalAPI: get pokemon info\n    ExternalAPI--\x3e>Worker: pokemon info\n\n    Worker->>Database: save pokemon\n    Database--\x3e>Worker: pokemon saved'}),(0,s.kt)("p",null,"You can trigger this use case by sending a message to Kafka on the ",(0,s.kt)("inlineCode",{parentName:"p"},"pokemon")," topic with the following message value:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "id":  143\n}\n')),(0,s.kt)("h2",{id:"building-a-test-for-this-scenario"},"Building a Test for This Scenario"),(0,s.kt)("p",null,"Using Tracetest, we can ",(0,s.kt)("a",{parentName:"p",href:"/web-ui/creating-tests"},"create a test")," that will produce a message to Kafka on ",(0,s.kt)("inlineCode",{parentName:"p"},"pokemon")," topic and validate the following properties:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"The worker should read the import task."),(0,s.kt)("li",{parentName:"ul"},"PokeAPI should return a valid response."),(0,s.kt)("li",{parentName:"ul"},"The database should respond with low latency (< 200ms).")),(0,s.kt)("h3",{id:"traces"},"Traces"),(0,s.kt)("p",null,"Running these tests for the first time will create a distributed trace like the image below, where you can see spans for the stream messaging, the PokeAPI (external API) call and database calls."),(0,s.kt)("p",null,(0,s.kt)("img",{src:a(38406).Z,width:"1722",height:"1996"})),(0,s.kt)("h3",{id:"assertions"},"Assertions"),(0,s.kt)("p",null,"With this trace, we can build ",(0,s.kt)("a",{parentName:"p",href:"/concepts/assertions"},"assertions")," with Tracetest and validate the API and Worker behavior:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"A message was received from Kafka stream:"),"\n",(0,s.kt)("img",{src:a(453).Z,width:"3052",height:"1160"}))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Import Pokemon use case was triggered"),":")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("img",{src:a(22491).Z,width:"3034",height:"1048"}))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"PokeAPI should return a valid response:"),"\n",(0,s.kt)("img",{src:a(40595).Z,width:"3028",height:"1082"}))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"The database should respond with low latency (< 200ms):"),"\n",(0,s.kt)("img",{src:a(59963).Z,width:"3046",height:"1094"})))),(0,s.kt)("p",null,"Now you can validate this entire use case."),(0,s.kt)("h3",{id:"test-definition"},"Test Definition"),(0,s.kt)("p",null,"If you want to replicate this entire test with Tracetest, you can replicate these steps in the Web UI or using the CLI, saving the following test definition as the file ",(0,s.kt)("inlineCode",{parentName:"p"},"test-definition.yml")," and running:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sh"},"tracetest run test -f test-definition.yml\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},'type: Test\nspec:\n  id: a97syfdkjad\n  name: Import a Pokemon reading a Stream\n  description: Import a Pokemon via Stream\n  trigger:\n    type: kafka\n    kafka:\n      brokerUrls:\n      - stream:9092\n      topic: pokemon\n      headers: []\n      messageKey: snorlax-key\n      messageValue: "{\\"id\\":143}"\n  specs:\n  - selector: span[tracetest.span.type="messaging" name="pokemon process" messaging.system="kafka" messaging.destination="pokemon" messaging.destination_kind="topic" messaging.operation="process"]\n    name: A message was received from Kafka stream\n    assertions:\n    - attr:messaging.system = "kafka"\n  - selector: span[tracetest.span.type="general" name="import pokemon"]\n    name: Import Pokemon use case was triggered\n    assertions:\n    - attr:name = "import pokemon"\n  - selector: span[tracetest.span.type="http" name="GET" http.method="GET"]\n    name: PokeAPI should return a valid response\n    assertions:\n    - attr:http.response.body  =  \'{"name":"snorlax"}\'\n    - attr:http.status_code  =  200\n  - selector: span[tracetest.span.type="database"]\n    name: The database should respond with low latency (< 200ms)\n    assertions:\n    - attr:tracetest.span.duration <= 200ms\n\n')))}d.isMDXComponent=!0},59963:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/import-pokemon-from-stream-database-latency-8a00c62656d409312d85684fa7d821d3.png"},40595:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/import-pokemon-from-stream-get-pokeapi-d48734c191018465f5d3ab189f2fd5a5.png"},453:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/import-pokemon-from-stream-message-received-27a7b9659f614ea1400950ad42e20307.png"},38406:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/import-pokemon-from-stream-trace-c330fabb1d731b377afb2411671cf854.png"},22491:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/import-pokemon-from-stream-use-case-executed-e1cdc3287dfc2f3d27b870b5cc0dfe0b.png"}}]);